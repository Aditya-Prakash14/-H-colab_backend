# Generated by Django 5.2.3 on 2025-06-24 16:25

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('category', models.CharField(choices=[('frontend', 'Frontend Development'), ('backend', 'Backend Development'), ('mobile', 'Mobile Development'), ('design', 'Design'), ('data', 'Data Science/Analytics'), ('devops', 'DevOps/Infrastructure'), ('ai_ml', 'AI/Machine Learning'), ('blockchain', 'Blockchain'), ('game_dev', 'Game Development'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Hackathon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('short_description', models.CharField(help_text='Brief description for listings', max_length=300)),
                ('location_type', models.CharField(choices=[('remote', 'Remote'), ('onsite', 'On-site'), ('hybrid', 'Hybrid')], max_length=10)),
                ('location_details', models.CharField(blank=True, help_text='Specific location or platform details', max_length=200)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('registration_deadline', models.DateTimeField()),
                ('max_team_size', models.PositiveIntegerField(default=4)),
                ('min_team_size', models.PositiveIntegerField(default=1)),
                ('prize_pool', models.CharField(blank=True, max_length=100)),
                ('themes', models.JSONField(default=list, help_text='List of hackathon themes/tracks')),
                ('required_skills', models.JSONField(default=list, help_text='Recommended skills for participants')),
                ('website_url', models.URLField(blank=True, null=True)),
                ('registration_url', models.URLField(blank=True, null=True)),
                ('organizer', models.CharField(max_length=200)),
                ('organizer_contact', models.EmailField(blank=True, max_length=254)),
                ('status', models.CharField(choices=[('upcoming', 'Upcoming'), ('ongoing', 'Ongoing'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='upcoming', max_length=20)),
                ('is_featured', models.BooleanField(default=False)),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to='hackathon_banners/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_hackathons', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='MatchingPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_team_size', models.PositiveIntegerField(default=4)),
                ('preferred_roles', models.JSONField(default=list, help_text='Preferred roles to work with')),
                ('preferred_skills', models.JSONField(default=list, help_text='Skills looking for in teammates')),
                ('experience_level_preference', models.JSONField(default=list, help_text='Preferred experience levels of teammates')),
                ('location_preference', models.CharField(choices=[('any', 'Any'), ('same_timezone', 'Same Timezone'), ('same_country', 'Same Country'), ('same_city', 'Same City')], default='any', max_length=20)),
                ('communication_style', models.JSONField(default=list, help_text='Preferred communication methods')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='matching_preferences', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('todo', 'To Do'), ('in_progress', 'In Progress'), ('review', 'In Review'), ('done', 'Done'), ('blocked', 'Blocked')], default='todo', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('due_date', models.DateTimeField(blank=True, null=True)),
                ('estimated_hours', models.PositiveIntegerField(blank=True, help_text='Estimated hours to complete', null=True)),
                ('tags', models.JSONField(default=list, help_text='Task tags for organization')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_tasks', to=settings.AUTH_USER_MODEL)),
                ('dependencies', models.ManyToManyField(blank=True, related_name='dependent_tasks', to='api.task')),
            ],
            options={
                'ordering': ['-priority', 'due_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='api.task')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_recruiting', models.BooleanField(default=True)),
                ('max_members', models.PositiveIntegerField(default=4)),
                ('required_skills', models.JSONField(default=list, help_text='Skills the team is looking for')),
                ('project_idea', models.TextField(blank=True, help_text='Initial project idea or description')),
                ('github_repo', models.URLField(blank=True, null=True)),
                ('project_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('hackathon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='api.hackathon')),
                ('leader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='led_teams', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='task',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='api.team'),
        ),
        migrations.CreateModel(
            name='TeamMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('leader', 'Team Leader'), ('developer', 'Developer'), ('frontend_dev', 'Frontend Developer'), ('backend_dev', 'Backend Developer'), ('mobile_dev', 'Mobile Developer'), ('designer', 'UI/UX Designer'), ('pm', 'Project Manager'), ('data_scientist', 'Data Scientist'), ('devops', 'DevOps Engineer'), ('other', 'Other')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected'), ('left', 'Left Team')], default='pending', max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.team')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-joined_at'],
                'unique_together': {('team', 'user')},
            },
        ),
        migrations.AddField(
            model_name='team',
            name='members',
            field=models.ManyToManyField(related_name='teams', through='api.TeamMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text='Tell others about yourself', max_length=500)),
                ('skills', models.JSONField(default=list, help_text='List of technical skills')),
                ('experience_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=20)),
                ('github_url', models.URLField(blank=True, null=True, validators=[django.core.validators.URLValidator()])),
                ('linkedin_url', models.URLField(blank=True, null=True, validators=[django.core.validators.URLValidator()])),
                ('portfolio_url', models.URLField(blank=True, null=True, validators=[django.core.validators.URLValidator()])),
                ('location', models.CharField(blank=True, help_text='City, Country', max_length=100)),
                ('timezone', models.CharField(blank=True, help_text="User's timezone", max_length=50)),
                ('availability', models.JSONField(default=dict, help_text='Availability preferences (days, hours, etc.)')),
                ('preferred_roles', models.JSONField(default=list, help_text='Preferred team roles (Developer, Designer, PM, etc.)')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('is_available', models.BooleanField(default=True, help_text='Whether user is available for new teams')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='TeamInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('leader', 'Team Leader'), ('developer', 'Developer'), ('frontend_dev', 'Frontend Developer'), ('backend_dev', 'Backend Developer'), ('mobile_dev', 'Mobile Developer'), ('designer', 'UI/UX Designer'), ('pm', 'Project Manager'), ('data_scientist', 'Data Scientist'), ('devops', 'DevOps Engineer'), ('other', 'Other')], max_length=20)),
                ('message', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('invited_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_invitations', to=settings.AUTH_USER_MODEL)),
                ('invited_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_invitations', to=settings.AUTH_USER_MODEL)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='api.team')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('team', 'invited_user')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='team',
            unique_together={('name', 'hackathon')},
        ),
    ]
